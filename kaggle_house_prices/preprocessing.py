# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/01_preprocessing.ipynb (unless otherwise specified).

__all__ = ['dir_raw_data', 'compressed_data_file', 'dep_var', 'show_dep_var', 'cont_names', 'show_na_share',
           'impute_continuous', 'cat_names', 'impute_categorical', 'do_sample', 'get_split', 'clean_data_path',
           'clean_test_data_path', 'clean_data_path_feather', 'clean_test_data_path_feather']

# Cell
from zipfile import ZipFile
from pathlib import Path
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from typing import List

from .utils import *

# Cell
dir_raw_data = Path("../data/raw")
# competition = "house-prices-advanced-regression-techniques"
compressed_data_file = dir_raw_data/f"{competition}.zip"

# Cell
dep_var = "SalePrice"

# Cell
def show_dep_var(df:pd.DataFrame, dep_var:str, bins:int=50):
    "Shows the `dep_var` distribution, linear and logarithmic, side by side."
    bins = 50

    fig, axs = plt.subplots(ncols=2, figsize=(14,4))
    ax = axs[0]
    ax.hist(df[dep_var].values, bins=bins)
    ax.set_title(f"{dep_var}")
    ax = axs[1]
    ax.hist(np.log(df[dep_var].values), bins=bins)
    ax.set_title(f"log({dep_var})")
    plt.show()

# Cell
cont_names = ['LotArea', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF2', 'BsmtUnfSF',
              'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'GrLivArea', 'GarageYrBlt', 'GarageArea',
              'WoodDeckSF', 'OpenPorchSF', 'LotFrontage', 'BsmtFinSF1', 'LowQualFinSF',]

# Cell
def show_na_share(df:pd.DataFrame, cols:List[str]):
    "Prints the share of NaN values by column"
    for col in cols:
        if df[col].hasnans:
            print(f"{col}: {df[col].isna().sum()/len(df)*100:.2f} %")

# Cell
def impute_continuous(df:pd.DataFrame, cont_cols:List[str]) -> pd.DataFrame:
    "Going through columns in `cont_names` this function replaces NaNs with the median adding a column flagging NaNs."
    for col in cont_cols:
        _x = df[col]
        ix_na = np.isnan(_x)
        ix_fin = np.isfinite(_x)
        df.loc[ix_na, col] = np.median(_x[ix_fin])
        df[f"{col}_na"] = ix_na
    return df

# Cell
cat_names = ['Id', 'MSSubClass', 'MSZoning', 'Street',
       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',
       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',
       'HouseStyle', 'OverallQual', 'OverallCond',
       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',
       'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',
       'BsmtCond', 'BsmtExposure', 'BsmtFinType1',
       'BsmtFinType2', 'Heating',
       'HeatingQC', 'CentralAir', 'Electrical',
       'BsmtFullBath', 'BsmtHalfBath', 'FullBath',
       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',
       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',
       'GarageFinish', 'GarageCars', 'GarageQual',
       'GarageCond', 'PavedDrive',
       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',
       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'SaleType',
       'SaleCondition']

# Cell
def impute_categorical(df:pd.DataFrame, cat_names:List[str], fill_val:str="NA") -> pd.DataFrame:
    "Going through columns in `cat_names` this function replaces NaNs with `fill_val` adding a column flagging NaNs."
    for col in cat_names:
        ix_na = df[col].isna()
        df.loc[ix_na, col] = fill_val
        df[f"{col}_na"] = ix_na
    return df

# Cell
def do_sample(df:pd.DataFrame, small_sample:bool, n:int=100) -> pd.DataFrame:
    "Generates samples from `df`."
    if small_sample:
        _df = df.sample(n=n)
    else:
        _df = df.copy(deep=True)
    return _df

# Cell
def get_split(df:pd.DataFrame, valid_pct:float=.2) -> pd.DataFrame:
    "Splitting the data frame into train and validation set, creating a new `valid` column"
    valid_idx = np.arange(int((1-valid_pct)*len(df)), len(df))
    train_idx = np.setdiff1d(np.arange(len(df)), valid_idx)
    df["valid"] = False
    df.iloc[valid_idx, df.columns.get_loc("valid")] = True
    return df

# Cell
clean_data_path = dir_raw_data.parent/"train_clean.csv"
clean_test_data_path = dir_raw_data.parent/"test_clean.csv"
clean_data_path_feather = dir_raw_data.parent/"train_clean.feather"
clean_test_data_path_feather = dir_raw_data.parent/"test_clean.feather"