# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/00_utils.ipynb (unless otherwise specified).

__all__ = ['extract_zip_files', 'dir_leaderboard', 'competition', 'compressed_leaderboard_file', 'fname_leaderboard',
           'display_all', 'show_leaderboard']

# Cell
from pathlib import Path
from typing import Union
import pandas as pd
from zipfile import ZipFile
import numpy as np
import matplotlib.pyplot as plt

# Cell
def extract_zip_files(fname:Path):
    "Extracts the complete content of the zipfile into a folder of the given zip file"
    print(f"Extracting {fname} â†’ {fname.parent}")
    with ZipFile(fname, "r") as f:
        f.extractall(fname.parent)

# Cell
dir_leaderboard = Path("../data/leaderboard/")
competition = "house-prices-advanced-regression-techniques"
compressed_leaderboard_file = dir_leaderboard/f"{competition}.zip"

# Cell
fname_leaderboard = dir_leaderboard/f"{competition}-publicleaderboard.csv"

# Cell
def display_all(df):
    "Extended displaying of a data frame"
    with pd.option_context("display.max_rows", 1000, "display.max_columns", 1000):
        display(df)

# Cell
def show_leaderboard(fname:Union[str, Path], score_bounds:tuple=None, col:str="Score", scale:str="linear",
                     score_ascending:bool=True, bins:int=50, user_score:float=None, user:str="my"):
    "Shows top competitors using `display_all` and shows the score distribution."
    df = pd.read_csv(fname, date_parser=["SubmissionDate"])
    if score_bounds is not None:
        assert len(score_bounds) == 2
        if score_bounds[0] is not None:
            df = df.loc[df[col] >= score_bounds[0], :]
        if score_bounds[1] is not None:
            df = df.loc[df[col] <= score_bounds[1], :]

    # sorting by score
    df = df.sort_values(col, ascending=score_ascending)
    # removing other entries of the same team
    df = df.drop_duplicates(subset="TeamId")

    display_all(df.head())


    if scale == "log": bins = np.logspace(np.log(df[col].min()), np.log(df[col].max()), bins)
    h, e = np.histogram(df[col].values, bins=bins, density=True)
    cdf = np.hstack(([0], (h*(e[1:]-e[:-1])).cumsum()))

    fig, ax = plt.subplots(figsize=(10,7))
    ax.hist(df[col], bins=bins, alpha=.5)

    ax1 = ax.twinx()
    ax1.plot(e, cdf, 'k', alpha=.8)

    title = f"Public Kaggle leaderboard"
    if user_score is not None:
        u_cdf = np.interp([user_score], e, cdf)
        ax1.scatter([user_score], u_cdf, marker='o', color="r")
        title += f" - {user} score: {user_score:.2f} = top {u_cdf[0]*100:.2f} %"
    ax1.set_title(title, fontsize=16)

    ax.set_xlabel(col)
    ax.set_ylabel("PDF")
    ax.set_xscale(scale)
    ax1.set_ylabel("CDF")
    plt.tight_layout()
    plt.show()